// baseðŸ’¯ - Copyright 2017-2025 Adam Niederer

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

#![cfg_attr(test, feature(test))]
#![cfg_attr(feature = "simd", feature(portable_simd))]
#[cfg(feature="simd")] use std::simd::Simd;
#[cfg(feature="simd")] use std::mem::transmute;

#[inline(always)]
pub fn emoji_to_char_scalar<'a, 'b>(buf: &'a [u8], out: &'b mut [u8]) -> &'b [u8] {
    for (i, chunk) in buf.chunks(4).enumerate() {
        out[i] = ((chunk[2].wrapping_sub(143)).wrapping_mul(64))
            .wrapping_add(chunk[3].wrapping_sub(128)).wrapping_sub(55)
    }
    out
}

#[inline(always)]
#[cfg(not(feature = "simd"))]
pub fn emoji_to_char<'a, 'b>(buf: &'a [u8], out: &'b mut [u8]) -> &'b [u8] {
    emoji_to_char_scalar(buf, out)
}

#[inline(always)]
#[cfg(feature="simd")]
pub fn emoji_to_char<'a, 'b>(buf: &'a [u8], out: &'b mut [u8]) -> &'b [u8] {
    for (i, chunk) in buf.chunks_exact(256).enumerate() {
        let (a, b, c, d) = unsafe {
            let ptr = transmute::<_, *const Simd<u16, 32>>(chunk.as_ptr());
            let a = ptr.add(0).read_unaligned();
            let b = ptr.add(1).read_unaligned();
            let c = ptr.add(2).read_unaligned();
            let d = ptr.add(3).read_unaligned();
            (a, b, c, d)
        };

        let (_, alo) = a.deinterleave(b);
        let (_, blo) = c.deinterleave(d);

        // shouldn't be an architecture where transmuting into a smaller simd type would cause alignment issues
        let alo8 = unsafe { transmute::<_, Simd<u8, 64>>(alo) };
        let blo8 = unsafe { transmute::<_, Simd<u8, 64>>(blo) };

        let (x, y) = alo8.deinterleave(blo8);

        use std::ops::{Sub, Mul, Add}; // TODO: use wrapping sub + mul + add instead
        let res = ((x.sub(Simd::splat(143))).mul(Simd::splat(64)))
            .add(y.sub(Simd::splat(128)).sub(Simd::splat(55)));

        res.copy_to_slice(&mut out[(i * 64)..(i * 64 + 64)]);
    }

    let tail_buf = buf.len() - buf.len() % 256;
    let tail_out = tail_buf / 4;
    emoji_to_char_scalar(&buf[tail_buf..], &mut out[tail_out..]);

    out
}

#[inline(always)]
pub fn char_to_emoji_scalar<'a, 'b>(buf: &'a [u8], out: &'b mut [u8]) -> &'b [u8] {
    for (i, ch) in buf.iter().enumerate() {
        out[4 * i + 0] = 0xf0;
        out[4 * i + 1] = 0x9f;
        // (ch + 55) >> 6 approximates (ch + 55) / 64
        out[4 * i + 2] = ((((*ch as u16).wrapping_add(55)) >> 6) + 143) as u8;
        // (ch + 55) & 0x3f approximates (ch + 55) % 64
        out[4 * i + 3] = (ch.wrapping_add(55) & 0x3f).wrapping_add(128);
    }
    out
}

#[inline(always)]
#[cfg(not(feature = "simd"))]
pub fn char_to_emoji<'a, 'b>(buf: &'a [u8], out: &'b mut [u8]) -> &'b [u8] {
    char_to_emoji_scalar(buf, out)
}

#[inline(always)]
#[cfg(feature = "simd")]
pub fn char_to_emoji<'a, 'b>(buf: &'a [u8], out: &'b mut [u8]) -> &'b [u8] {
    for (i, chunk) in buf.chunks_exact(64).enumerate() {
        let (hi, lo) = unsafe {
            let ptr = transmute::<_, *const Simd<u16, 32>>(chunk.as_ptr());
            let hi = ptr.read_unaligned();
            let lo = ptr.read_unaligned();
            (hi >> Simd::splat(8), lo & Simd::splat(0xff))
        };

        use std::ops::Add; // TODO: use wrapping add instead
        let hix = (hi.add(Simd::splat(55)) & Simd::splat(0x03f)).add(Simd::splat(128));
        let lox = (lo.add(Simd::splat(55)) & Simd::splat(0x03f)).add(Simd::splat(128));

        let hiy = (hi.add(Simd::splat(55)) >> Simd::splat(6)).add(Simd::splat(143));
        let loy = (lo.add(Simd::splat(55)) >> Simd::splat(6)).add(Simd::splat(143));

        let hixy = (hix << 8) | hiy;
        let loxy = (lox << 8) | loy;

        let (xya, xyb) = loxy.interleave(hixy);

        let (a, b) = Simd::splat(0x9ff0).interleave(xya);
        let (c, d) = Simd::splat(0x9ff0).interleave(xyb);

        unsafe { transmute::<_, Simd<u8, 64>>(a) }.copy_to_slice(&mut out[(i * 256)..(i * 256 + 64)]);
        unsafe { transmute::<_, Simd<u8, 64>>(b) }.copy_to_slice(&mut out[(i * 256 + 64)..(i * 256 + 128)]);
        unsafe { transmute::<_, Simd<u8, 64>>(c) }.copy_to_slice(&mut out[(i * 256 + 128)..(i * 256 + 192)]);
        unsafe { transmute::<_, Simd<u8, 64>>(d) }.copy_to_slice(&mut out[(i * 256 + 192)..(i * 256 + 256)]);
    }

    let tail_buf = buf.len() - buf.len() % 64;
    let tail_out = tail_buf * 4;
    char_to_emoji_scalar(&buf[tail_buf..], &mut out[tail_out..]);

    out
}

#[cfg(test)] extern crate test;

#[cfg(test)]
mod tests {
    use super::*;
    use test::bench::Bencher;
    use std::hint::black_box;
    use std::ops::RangeInclusive;

    #[test]
    fn it_encodes() {
        assert_eq!(char_to_emoji(&[0u8], &mut [0u8; 4]), &[240, 159, 143, 183]);
    }

    #[test]
    fn it_decodes() {
        assert_eq!(emoji_to_char(&[240, 159, 143, 183], &mut [0u8; 1]), &[0u8]);
    }

    #[test]
    fn it_encodes_everything() {
        let expected: &[u8] = &[240, 159, 143, 183, 240, 159, 143, 184, 240, 159, 143, 185, 240, 159, 143, 186, 240, 159, 143, 187, 240, 159, 143, 188, 240, 159, 143, 189, 240, 159, 143, 190, 240, 159, 143, 191, 240, 159, 144, 128, 240, 159, 144, 129, 240, 159, 144, 130, 240, 159, 144, 131, 240, 159, 144, 132, 240, 159, 144, 133, 240, 159, 144, 134, 240, 159, 144, 135, 240, 159, 144, 136, 240, 159, 144, 137, 240, 159, 144, 138, 240, 159, 144, 139, 240, 159, 144, 140, 240, 159, 144, 141, 240, 159, 144, 142, 240, 159, 144, 143, 240, 159, 144, 144, 240, 159, 144, 145, 240, 159, 144, 146, 240, 159, 144, 147, 240, 159, 144, 148, 240, 159, 144, 149, 240, 159, 144, 150, 240, 159, 144, 151, 240, 159, 144, 152, 240, 159, 144, 153, 240, 159, 144, 154, 240, 159, 144, 155, 240, 159, 144, 156, 240, 159, 144, 157, 240, 159, 144, 158, 240, 159, 144, 159, 240, 159, 144, 160, 240, 159, 144, 161, 240, 159, 144, 162, 240, 159, 144, 163, 240, 159, 144, 164, 240, 159, 144, 165, 240, 159, 144, 166, 240, 159, 144, 167, 240, 159, 144, 168, 240, 159, 144, 169, 240, 159, 144, 170, 240, 159, 144, 171, 240, 159, 144, 172, 240, 159, 144, 173, 240, 159, 144, 174, 240, 159, 144, 175, 240, 159, 144, 176, 240, 159, 144, 177, 240, 159, 144, 178, 240, 159, 144, 179, 240, 159, 144, 180, 240, 159, 144, 181, 240, 159, 144, 182, 240, 159, 144, 183, 240, 159, 144, 184, 240, 159, 144, 185, 240, 159, 144, 186, 240, 159, 144, 187, 240, 159, 144, 188, 240, 159, 144, 189, 240, 159, 144, 190, 240, 159, 144, 191, 240, 159, 145, 128, 240, 159, 145, 129, 240, 159, 145, 130, 240, 159, 145, 131, 240, 159, 145, 132, 240, 159, 145, 133, 240, 159, 145, 134, 240, 159, 145, 135, 240, 159, 145, 136, 240, 159, 145, 137, 240, 159, 145, 138, 240, 159, 145, 139, 240, 159, 145, 140, 240, 159, 145, 141, 240, 159, 145, 142, 240, 159, 145, 143, 240, 159, 145, 144, 240, 159, 145, 145, 240, 159, 145, 146, 240, 159, 145, 147, 240, 159, 145, 148, 240, 159, 145, 149, 240, 159, 145, 150, 240, 159, 145, 151, 240, 159, 145, 152, 240, 159, 145, 153, 240, 159, 145, 154, 240, 159, 145, 155, 240, 159, 145, 156, 240, 159, 145, 157, 240, 159, 145, 158, 240, 159, 145, 159, 240, 159, 145, 160, 240, 159, 145, 161, 240, 159, 145, 162, 240, 159, 145, 163, 240, 159, 145, 164, 240, 159, 145, 165, 240, 159, 145, 166, 240, 159, 145, 167, 240, 159, 145, 168, 240, 159, 145, 169, 240, 159, 145, 170, 240, 159, 145, 171, 240, 159, 145, 172, 240, 159, 145, 173, 240, 159, 145, 174, 240, 159, 145, 175, 240, 159, 145, 176, 240, 159, 145, 177, 240, 159, 145, 178, 240, 159, 145, 179, 240, 159, 145, 180, 240, 159, 145, 181, 240, 159, 145, 182, 240, 159, 145, 183, 240, 159, 145, 184, 240, 159, 145, 185, 240, 159, 145, 186, 240, 159, 145, 187, 240, 159, 145, 188, 240, 159, 145, 189, 240, 159, 145, 190, 240, 159, 145, 191, 240, 159, 146, 128, 240, 159, 146, 129, 240, 159, 146, 130, 240, 159, 146, 131, 240, 159, 146, 132, 240, 159, 146, 133, 240, 159, 146, 134, 240, 159, 146, 135, 240, 159, 146, 136, 240, 159, 146, 137, 240, 159, 146, 138, 240, 159, 146, 139, 240, 159, 146, 140, 240, 159, 146, 141, 240, 159, 146, 142, 240, 159, 146, 143, 240, 159, 146, 144, 240, 159, 146, 145, 240, 159, 146, 146, 240, 159, 146, 147, 240, 159, 146, 148, 240, 159, 146, 149, 240, 159, 146, 150, 240, 159, 146, 151, 240, 159, 146, 152, 240, 159, 146, 153, 240, 159, 146, 154, 240, 159, 146, 155, 240, 159, 146, 156, 240, 159, 146, 157, 240, 159, 146, 158, 240, 159, 146, 159, 240, 159, 146, 160, 240, 159, 146, 161, 240, 159, 146, 162, 240, 159, 146, 163, 240, 159, 146, 164, 240, 159, 146, 165, 240, 159, 146, 166, 240, 159, 146, 167, 240, 159, 146, 168, 240, 159, 146, 169, 240, 159, 146, 170, 240, 159, 146, 171, 240, 159, 146, 172, 240, 159, 146, 173, 240, 159, 146, 174, 240, 159, 146, 175, 240, 159, 146, 176, 240, 159, 146, 177, 240, 159, 146, 178, 240, 159, 146, 179, 240, 159, 146, 180, 240, 159, 146, 181, 240, 159, 146, 182, 240, 159, 146, 183, 240, 159, 146, 184, 240, 159, 146, 185, 240, 159, 146, 186, 240, 159, 146, 187, 240, 159, 146, 188, 240, 159, 146, 189, 240, 159, 146, 190, 240, 159, 146, 191, 240, 159, 147, 128, 240, 159, 147, 129, 240, 159, 147, 130, 240, 159, 147, 131, 240, 159, 147, 132, 240, 159, 147, 133, 240, 159, 147, 134, 240, 159, 147, 135, 240, 159, 147, 136, 240, 159, 147, 137, 240, 159, 147, 138, 240, 159, 147, 139, 240, 159, 147, 140, 240, 159, 147, 141, 240, 159, 147, 142, 240, 159, 147, 143, 240, 159, 147, 144, 240, 159, 147, 145, 240, 159, 147, 146, 240, 159, 147, 147, 240, 159, 147, 148, 240, 159, 147, 149, 240, 159, 147, 150, 240, 159, 147, 151, 240, 159, 147, 152, 240, 159, 147, 153, 240, 159, 147, 154, 240, 159, 147, 155, 240, 159, 147, 156, 240, 159, 147, 157, 240, 159, 147, 158, 240, 159, 147, 159, 240, 159, 147, 160, 240, 159, 147, 161, 240, 159, 147, 162, 240, 159, 147, 163, 240, 159, 147, 164, 240, 159, 147, 165, 240, 159, 147, 166, 240, 159, 147, 167, 240, 159, 147, 168, 240, 159, 147, 169, 240, 159, 147, 170, 240, 159, 147, 171, 240, 159, 147, 172, 240, 159, 147, 173, 240, 159, 147, 174, 240, 159, 147, 175, 240, 159, 147, 176, 240, 159, 147, 177, 240, 159, 147, 178, 240, 159, 147, 179, 240, 159, 147, 180, 240, 159, 147, 181, 240, 159, 147, 182];
        assert_eq!(char_to_emoji(&RangeInclusive::new(0, 255).collect::<Vec<u8>>(), &mut [0u8; 0x400]), expected);
    }

    #[test]
    fn it_decodes_everything() {
        let expected: &[u8] = &[240, 159, 143, 183, 240, 159, 143, 184, 240, 159, 143, 185, 240, 159, 143, 186, 240, 159, 143, 187, 240, 159, 143, 188, 240, 159, 143, 189, 240, 159, 143, 190, 240, 159, 143, 191, 240, 159, 144, 128, 240, 159, 144, 129, 240, 159, 144, 130, 240, 159, 144, 131, 240, 159, 144, 132, 240, 159, 144, 133, 240, 159, 144, 134, 240, 159, 144, 135, 240, 159, 144, 136, 240, 159, 144, 137, 240, 159, 144, 138, 240, 159, 144, 139, 240, 159, 144, 140, 240, 159, 144, 141, 240, 159, 144, 142, 240, 159, 144, 143, 240, 159, 144, 144, 240, 159, 144, 145, 240, 159, 144, 146, 240, 159, 144, 147, 240, 159, 144, 148, 240, 159, 144, 149, 240, 159, 144, 150, 240, 159, 144, 151, 240, 159, 144, 152, 240, 159, 144, 153, 240, 159, 144, 154, 240, 159, 144, 155, 240, 159, 144, 156, 240, 159, 144, 157, 240, 159, 144, 158, 240, 159, 144, 159, 240, 159, 144, 160, 240, 159, 144, 161, 240, 159, 144, 162, 240, 159, 144, 163, 240, 159, 144, 164, 240, 159, 144, 165, 240, 159, 144, 166, 240, 159, 144, 167, 240, 159, 144, 168, 240, 159, 144, 169, 240, 159, 144, 170, 240, 159, 144, 171, 240, 159, 144, 172, 240, 159, 144, 173, 240, 159, 144, 174, 240, 159, 144, 175, 240, 159, 144, 176, 240, 159, 144, 177, 240, 159, 144, 178, 240, 159, 144, 179, 240, 159, 144, 180, 240, 159, 144, 181, 240, 159, 144, 182, 240, 159, 144, 183, 240, 159, 144, 184, 240, 159, 144, 185, 240, 159, 144, 186, 240, 159, 144, 187, 240, 159, 144, 188, 240, 159, 144, 189, 240, 159, 144, 190, 240, 159, 144, 191, 240, 159, 145, 128, 240, 159, 145, 129, 240, 159, 145, 130, 240, 159, 145, 131, 240, 159, 145, 132, 240, 159, 145, 133, 240, 159, 145, 134, 240, 159, 145, 135, 240, 159, 145, 136, 240, 159, 145, 137, 240, 159, 145, 138, 240, 159, 145, 139, 240, 159, 145, 140, 240, 159, 145, 141, 240, 159, 145, 142, 240, 159, 145, 143, 240, 159, 145, 144, 240, 159, 145, 145, 240, 159, 145, 146, 240, 159, 145, 147, 240, 159, 145, 148, 240, 159, 145, 149, 240, 159, 145, 150, 240, 159, 145, 151, 240, 159, 145, 152, 240, 159, 145, 153, 240, 159, 145, 154, 240, 159, 145, 155, 240, 159, 145, 156, 240, 159, 145, 157, 240, 159, 145, 158, 240, 159, 145, 159, 240, 159, 145, 160, 240, 159, 145, 161, 240, 159, 145, 162, 240, 159, 145, 163, 240, 159, 145, 164, 240, 159, 145, 165, 240, 159, 145, 166, 240, 159, 145, 167, 240, 159, 145, 168, 240, 159, 145, 169, 240, 159, 145, 170, 240, 159, 145, 171, 240, 159, 145, 172, 240, 159, 145, 173, 240, 159, 145, 174, 240, 159, 145, 175, 240, 159, 145, 176, 240, 159, 145, 177, 240, 159, 145, 178, 240, 159, 145, 179, 240, 159, 145, 180, 240, 159, 145, 181, 240, 159, 145, 182, 240, 159, 145, 183, 240, 159, 145, 184, 240, 159, 145, 185, 240, 159, 145, 186, 240, 159, 145, 187, 240, 159, 145, 188, 240, 159, 145, 189, 240, 159, 145, 190, 240, 159, 145, 191, 240, 159, 146, 128, 240, 159, 146, 129, 240, 159, 146, 130, 240, 159, 146, 131, 240, 159, 146, 132, 240, 159, 146, 133, 240, 159, 146, 134, 240, 159, 146, 135, 240, 159, 146, 136, 240, 159, 146, 137, 240, 159, 146, 138, 240, 159, 146, 139, 240, 159, 146, 140, 240, 159, 146, 141, 240, 159, 146, 142, 240, 159, 146, 143, 240, 159, 146, 144, 240, 159, 146, 145, 240, 159, 146, 146, 240, 159, 146, 147, 240, 159, 146, 148, 240, 159, 146, 149, 240, 159, 146, 150, 240, 159, 146, 151, 240, 159, 146, 152, 240, 159, 146, 153, 240, 159, 146, 154, 240, 159, 146, 155, 240, 159, 146, 156, 240, 159, 146, 157, 240, 159, 146, 158, 240, 159, 146, 159, 240, 159, 146, 160, 240, 159, 146, 161, 240, 159, 146, 162, 240, 159, 146, 163, 240, 159, 146, 164, 240, 159, 146, 165, 240, 159, 146, 166, 240, 159, 146, 167, 240, 159, 146, 168, 240, 159, 146, 169, 240, 159, 146, 170, 240, 159, 146, 171, 240, 159, 146, 172, 240, 159, 146, 173, 240, 159, 146, 174, 240, 159, 146, 175, 240, 159, 146, 176, 240, 159, 146, 177, 240, 159, 146, 178, 240, 159, 146, 179, 240, 159, 146, 180, 240, 159, 146, 181, 240, 159, 146, 182, 240, 159, 146, 183, 240, 159, 146, 184, 240, 159, 146, 185, 240, 159, 146, 186, 240, 159, 146, 187, 240, 159, 146, 188, 240, 159, 146, 189, 240, 159, 146, 190, 240, 159, 146, 191, 240, 159, 147, 128, 240, 159, 147, 129, 240, 159, 147, 130, 240, 159, 147, 131, 240, 159, 147, 132, 240, 159, 147, 133, 240, 159, 147, 134, 240, 159, 147, 135, 240, 159, 147, 136, 240, 159, 147, 137, 240, 159, 147, 138, 240, 159, 147, 139, 240, 159, 147, 140, 240, 159, 147, 141, 240, 159, 147, 142, 240, 159, 147, 143, 240, 159, 147, 144, 240, 159, 147, 145, 240, 159, 147, 146, 240, 159, 147, 147, 240, 159, 147, 148, 240, 159, 147, 149, 240, 159, 147, 150, 240, 159, 147, 151, 240, 159, 147, 152, 240, 159, 147, 153, 240, 159, 147, 154, 240, 159, 147, 155, 240, 159, 147, 156, 240, 159, 147, 157, 240, 159, 147, 158, 240, 159, 147, 159, 240, 159, 147, 160, 240, 159, 147, 161, 240, 159, 147, 162, 240, 159, 147, 163, 240, 159, 147, 164, 240, 159, 147, 165, 240, 159, 147, 166, 240, 159, 147, 167, 240, 159, 147, 168, 240, 159, 147, 169, 240, 159, 147, 170, 240, 159, 147, 171, 240, 159, 147, 172, 240, 159, 147, 173, 240, 159, 147, 174, 240, 159, 147, 175, 240, 159, 147, 176, 240, 159, 147, 177, 240, 159, 147, 178, 240, 159, 147, 179, 240, 159, 147, 180, 240, 159, 147, 181, 240, 159, 147, 182];
        assert_eq!(emoji_to_char(expected, &mut [0u8; 0x100]), RangeInclusive::new(0,255).collect::<Vec<u8>>().as_slice());
    }

    #[bench]
    fn bench_char_to_emoji_uniform(b: &mut Bencher) {
        let in_ = &RangeInclusive::new(0, 255).cycle().take(0x10000).collect::<Vec<u8>>();
        let out = &mut [0u8; 0x40000];

        b.iter(|| {
            black_box(char_to_emoji(black_box(in_), black_box(out)));
        });
    }

    #[bench]
    fn bench_emoji_to_char_uniform(b: &mut Bencher) {
        let expected: &[u8] = &[240, 159, 143, 183, 240, 159, 143, 184, 240, 159, 143, 185, 240, 159, 143, 186, 240, 159, 143, 187, 240, 159, 143, 188, 240, 159, 143, 189, 240, 159, 143, 190, 240, 159, 143, 191, 240, 159, 144, 128, 240, 159, 144, 129, 240, 159, 144, 130, 240, 159, 144, 131, 240, 159, 144, 132, 240, 159, 144, 133, 240, 159, 144, 134, 240, 159, 144, 135, 240, 159, 144, 136, 240, 159, 144, 137, 240, 159, 144, 138, 240, 159, 144, 139, 240, 159, 144, 140, 240, 159, 144, 141, 240, 159, 144, 142, 240, 159, 144, 143, 240, 159, 144, 144, 240, 159, 144, 145, 240, 159, 144, 146, 240, 159, 144, 147, 240, 159, 144, 148, 240, 159, 144, 149, 240, 159, 144, 150, 240, 159, 144, 151, 240, 159, 144, 152, 240, 159, 144, 153, 240, 159, 144, 154, 240, 159, 144, 155, 240, 159, 144, 156, 240, 159, 144, 157, 240, 159, 144, 158, 240, 159, 144, 159, 240, 159, 144, 160, 240, 159, 144, 161, 240, 159, 144, 162, 240, 159, 144, 163, 240, 159, 144, 164, 240, 159, 144, 165, 240, 159, 144, 166, 240, 159, 144, 167, 240, 159, 144, 168, 240, 159, 144, 169, 240, 159, 144, 170, 240, 159, 144, 171, 240, 159, 144, 172, 240, 159, 144, 173, 240, 159, 144, 174, 240, 159, 144, 175, 240, 159, 144, 176, 240, 159, 144, 177, 240, 159, 144, 178, 240, 159, 144, 179, 240, 159, 144, 180, 240, 159, 144, 181, 240, 159, 144, 182, 240, 159, 144, 183, 240, 159, 144, 184, 240, 159, 144, 185, 240, 159, 144, 186, 240, 159, 144, 187, 240, 159, 144, 188, 240, 159, 144, 189, 240, 159, 144, 190, 240, 159, 144, 191, 240, 159, 145, 128, 240, 159, 145, 129, 240, 159, 145, 130, 240, 159, 145, 131, 240, 159, 145, 132, 240, 159, 145, 133, 240, 159, 145, 134, 240, 159, 145, 135, 240, 159, 145, 136, 240, 159, 145, 137, 240, 159, 145, 138, 240, 159, 145, 139, 240, 159, 145, 140, 240, 159, 145, 141, 240, 159, 145, 142, 240, 159, 145, 143, 240, 159, 145, 144, 240, 159, 145, 145, 240, 159, 145, 146, 240, 159, 145, 147, 240, 159, 145, 148, 240, 159, 145, 149, 240, 159, 145, 150, 240, 159, 145, 151, 240, 159, 145, 152, 240, 159, 145, 153, 240, 159, 145, 154, 240, 159, 145, 155, 240, 159, 145, 156, 240, 159, 145, 157, 240, 159, 145, 158, 240, 159, 145, 159, 240, 159, 145, 160, 240, 159, 145, 161, 240, 159, 145, 162, 240, 159, 145, 163, 240, 159, 145, 164, 240, 159, 145, 165, 240, 159, 145, 166, 240, 159, 145, 167, 240, 159, 145, 168, 240, 159, 145, 169, 240, 159, 145, 170, 240, 159, 145, 171, 240, 159, 145, 172, 240, 159, 145, 173, 240, 159, 145, 174, 240, 159, 145, 175, 240, 159, 145, 176, 240, 159, 145, 177, 240, 159, 145, 178, 240, 159, 145, 179, 240, 159, 145, 180, 240, 159, 145, 181, 240, 159, 145, 182, 240, 159, 145, 183, 240, 159, 145, 184, 240, 159, 145, 185, 240, 159, 145, 186, 240, 159, 145, 187, 240, 159, 145, 188, 240, 159, 145, 189, 240, 159, 145, 190, 240, 159, 145, 191, 240, 159, 146, 128, 240, 159, 146, 129, 240, 159, 146, 130, 240, 159, 146, 131, 240, 159, 146, 132, 240, 159, 146, 133, 240, 159, 146, 134, 240, 159, 146, 135, 240, 159, 146, 136, 240, 159, 146, 137, 240, 159, 146, 138, 240, 159, 146, 139, 240, 159, 146, 140, 240, 159, 146, 141, 240, 159, 146, 142, 240, 159, 146, 143, 240, 159, 146, 144, 240, 159, 146, 145, 240, 159, 146, 146, 240, 159, 146, 147, 240, 159, 146, 148, 240, 159, 146, 149, 240, 159, 146, 150, 240, 159, 146, 151, 240, 159, 146, 152, 240, 159, 146, 153, 240, 159, 146, 154, 240, 159, 146, 155, 240, 159, 146, 156, 240, 159, 146, 157, 240, 159, 146, 158, 240, 159, 146, 159, 240, 159, 146, 160, 240, 159, 146, 161, 240, 159, 146, 162, 240, 159, 146, 163, 240, 159, 146, 164, 240, 159, 146, 165, 240, 159, 146, 166, 240, 159, 146, 167, 240, 159, 146, 168, 240, 159, 146, 169, 240, 159, 146, 170, 240, 159, 146, 171, 240, 159, 146, 172, 240, 159, 146, 173, 240, 159, 146, 174, 240, 159, 146, 175, 240, 159, 146, 176, 240, 159, 146, 177, 240, 159, 146, 178, 240, 159, 146, 179, 240, 159, 146, 180, 240, 159, 146, 181, 240, 159, 146, 182, 240, 159, 146, 183, 240, 159, 146, 184, 240, 159, 146, 185, 240, 159, 146, 186, 240, 159, 146, 187, 240, 159, 146, 188, 240, 159, 146, 189, 240, 159, 146, 190, 240, 159, 146, 191, 240, 159, 147, 128, 240, 159, 147, 129, 240, 159, 147, 130, 240, 159, 147, 131, 240, 159, 147, 132, 240, 159, 147, 133, 240, 159, 147, 134, 240, 159, 147, 135, 240, 159, 147, 136, 240, 159, 147, 137, 240, 159, 147, 138, 240, 159, 147, 139, 240, 159, 147, 140, 240, 159, 147, 141, 240, 159, 147, 142, 240, 159, 147, 143, 240, 159, 147, 144, 240, 159, 147, 145, 240, 159, 147, 146, 240, 159, 147, 147, 240, 159, 147, 148, 240, 159, 147, 149, 240, 159, 147, 150, 240, 159, 147, 151, 240, 159, 147, 152, 240, 159, 147, 153, 240, 159, 147, 154, 240, 159, 147, 155, 240, 159, 147, 156, 240, 159, 147, 157, 240, 159, 147, 158, 240, 159, 147, 159, 240, 159, 147, 160, 240, 159, 147, 161, 240, 159, 147, 162, 240, 159, 147, 163, 240, 159, 147, 164, 240, 159, 147, 165, 240, 159, 147, 166, 240, 159, 147, 167, 240, 159, 147, 168, 240, 159, 147, 169, 240, 159, 147, 170, 240, 159, 147, 171, 240, 159, 147, 172, 240, 159, 147, 173, 240, 159, 147, 174, 240, 159, 147, 175, 240, 159, 147, 176, 240, 159, 147, 177, 240, 159, 147, 178, 240, 159, 147, 179, 240, 159, 147, 180, 240, 159, 147, 181, 240, 159, 147, 182];
        let in_ = &expected.iter().cycle().take(0x40000).map(|e| e.clone()).collect::<Vec<u8>>();
        let out = &mut [0u8; 0x10000];

        b.iter(|| {
            black_box(emoji_to_char(black_box(in_), black_box(out)));
        });
    }

    #[bench]
    fn bench_char_to_emoji_zero(b: &mut Bencher) {
        let in_ = &[0u8; 0x10000];
        let out = &mut [0u8; 0x40000];

        b.iter(|| {
            black_box(char_to_emoji(black_box(in_), black_box(out)));
        });
    }

    #[bench]
    fn bench_emoji_to_char_zero(b: &mut Bencher) {
        let in_ = &[0u8; 0x40000];
        let out = &mut [0u8; 0x10000];

        b.iter(|| {
            black_box(emoji_to_char(black_box(in_), black_box(out)));
        });
    }

}
